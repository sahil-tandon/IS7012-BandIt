// <auto-generated />
using System;
using BandIt.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BandIt.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.2-rtm-30932");

            modelBuilder.Entity("BandIt.Models.Band", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BandName")
                        .IsRequired();

                    b.Property<int>("DateFounded");

                    b.Property<string>("Genre")
                        .IsRequired();

                    b.Property<string>("Image");

                    b.Property<int>("ManagerID");

                    b.Property<string>("Members")
                        .IsRequired();

                    b.Property<string>("Origin");

                    b.Property<string>("Website");

                    b.HasKey("Id");

                    b.HasIndex("ManagerID");

                    b.ToTable("Band");
                });

            modelBuilder.Entity("BandIt.Models.Concert", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BandID");

                    b.Property<string>("ConcertName")
                        .IsRequired();

                    b.Property<DateTime?>("Date")
                        .IsRequired();

                    b.Property<decimal>("TicketPrice");

                    b.Property<string>("Venue")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("BandID");

                    b.ToTable("Concert");
                });

            modelBuilder.Entity("BandIt.Models.Manager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Age");

                    b.Property<string>("Email");

                    b.Property<int>("Experience");

                    b.Property<string>("Image");

                    b.Property<string>("ManagerName")
                        .IsRequired();

                    b.Property<string>("Nationality");

                    b.Property<string>("Phone");

                    b.HasKey("Id");

                    b.ToTable("Manager");
                });

            modelBuilder.Entity("BandIt.Models.Song", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BandID");

                    b.Property<string>("Duration")
                        .IsRequired();

                    b.Property<decimal>("Rating");

                    b.Property<DateTime?>("ReleaseDate")
                        .IsRequired();

                    b.Property<string>("Title")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("BandID");

                    b.ToTable("Song");
                });

            modelBuilder.Entity("BandIt.Models.Band", b =>
                {
                    b.HasOne("BandIt.Models.Manager", "BandManager")
                        .WithMany("Bands")
                        .HasForeignKey("ManagerID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BandIt.Models.Concert", b =>
                {
                    b.HasOne("BandIt.Models.Band", "PerformingBand")
                        .WithMany("Concerts")
                        .HasForeignKey("BandID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BandIt.Models.Song", b =>
                {
                    b.HasOne("BandIt.Models.Band", "Artist")
                        .WithMany("Songs")
                        .HasForeignKey("BandID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
